#include<graphics.h>
#include<stdio.h>
#include<Windows.h>
#include<conio.h>

#define R 12 //地图行数
#define C 12 //地图列数 
#define NUM 9 //地图总数

enum MENU
{
	EXIT,
	PLAY
};

struct MAP
{
	 int r;
	 int c;
	char map[R][C];
};

struct MAP all_map[NUM]=
{
   { 
      10, 10, 
	    { 
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,1,1,1,0,0,0,0},  //地图一 
            {0,0,0,1,3,1,0,0,0,0},
            {0,0,0,1,0,1,1,1,1,0},
            {0,1,1,1,2,0,2,3,1,0},
            {0,1,3,0,2,4,1,1,1,0},
            {0,1,1,1,1,2,1,0,0,0},
            {0,0,0,0,1,3,1,0,0,0},
            {0,0,0,0,1,1,1,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
       } 
    },	
	{
		10,10,
		{
			{0,1,1,1,1,1,1,1,0,0}, //地图二
			{0,1,4,3,1,0,0,1,0,0},
			{0,1,0,0,2,0,0,1,0,0},
            {0,1,1,0,1,1,0,1,1,0},
            {0,0,1,0,1,1,0,0,1,0},
            {0,0,1,3,0,2,0,0,1,0},
            {0,0,1,0,0,1,0,0,1,0},
            {0,0,1,1,1,1,1,1,1,0}		
			
		}
		
	},
	{
		10,10,
		{
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0},
			{0,1,1,1,1,1,1,1,1,0},  //地图三
			{0,1,0,0,0,4,0,0,1,0}, 
			{0,1,0,0,2,2,2,0,1,0},
			{1,1,0,1,1,0,1,1,1,0},
			{1,0,0,0,3,3,3,1,0,0}, 
			{1,0,0,0,1,1,1,1,0,0},
			{1,1,1,1,1,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		} 
	},
	{
		10,10,
		{ 
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0},
		    {0,0,0,1,1,1,1,1,0,0}, //地图四
			{0,1,1,1,3,0,0,1,0,0}, 
			{0,1,4,1,0,0,0,1,0,0},
			{0,1,0,2,5,2,0,1,0,0},
			{0,1,0,0,0,1,1,1,0,0}, 
			{0,1,0,0,3,1,0,0,0,0},
			{0,1,1,1,1,1,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
	    } 
	},
	{
		10,10,
		{
			{0,0,0,0,0,0,0,0,0,0},
		    {0,0,0,1,1,1,1,1,0,0},//地图五
			{0,1,1,1,0,0,0,1,0,0},
			{0,1,0,2,0,1,0,1,1,0},
            {0,1,0,1,0,0,3,0,1,0},
            {0,1,0,0,0,0,1,0,1,0},
            {0,1,1,2,1,3,0,0,1,0},
            {0,0,1,4,0,0,1,1,1,0},
            {0,0,1,1,1,1,1,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		}
	},
	{
		10,10,
		{
			{0,0,0,0,1,1,1,0,0,0},//地图六
			{0,1,1,1,1,4,1,0,0,0},
			{0,1,3,0,0,0,1,1,0,0},
			{0,1,3,0,5,0,0,1,0,0},
            {0,1,3,0,1,2,0,1,0,0},
            {0,1,1,2,1,0,0,1,0,0},
            {0,0,1,0,2,0,1,1,0,0},
            {0,0,1,0,0,0,1,0,0,0},
            {0,0,1,1,1,1,1,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		}
	},
	{
		10,10,
		{
			{1,1,1,1,1,1,1,1,1,0},//地图七
			{1,0,0,0,4,0,0,0,1,0},
			{1,0,0,0,2,0,0,0,1,0},
			{1,0,5,0,1,0,5,0,1,0},
            {1,3,1,3,1,3,1,3,1,0},
            {1,0,3,2,1,2,3,0,1,0},
            {1,0,2,0,2,0,2,0,1,0},
            {1,0,0,0,0,0,0,0,1,0},
            {1,1,1,1,1,1,1,1,1,0},
			{0,0,0,0,0,0,0,0,0,0}
		}
	},
	{
		10,10,
		{
			{0,0,0,0,0,0,0,0,0,0},
			{0,1,1,1,1,1,1,1,1,0},//地图八 
			{0,1,0,0,0,1,0,0,1,0},
			{0,1,0,1,0,1,2,3,1,0},
			{0,1,0,0,0,0,2,3,1,0},
            {0,1,0,1,0,1,0,0,1,0},
            {0,1,0,0,0,1,0,0,1,0},
            {0,1,1,1,1,1,0,4,1,0},
            {0,0,0,0,0,1,1,1,1,0},
			{0,0,0,0,0,0,0,0,0,0}
		}
	},
	{
		10,10,
		{
		    {0,0,1,1,1,1,0,0,0,0},//地图九 
			{0,0,1,0,0,1,1,1,1,0},
			{0,1,1,4,0,2,0,0,1,0},
			{0,1,0,5,3,5,0,0,1,0},
            {1,1,0,5,0,5,0,1,1,0},
            {1,0,0,5,0,5,0,1,0,0},
            {1,0,0,5,5,5,0,1,0,0},
            {1,1,0,0,0,0,0,1,0,0},
            {0,1,1,1,1,0,0,1,0,0},
            {0,0,0,0,1,1,1,1,0,0}
        }
	}
};

struct MAP all_map1[NUM]=
{
   { 
      10, 10, 
	    { 
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,1,1,1,0,0,0,0},  //地图一 
            {0,0,0,1,3,1,0,0,0,0},
            {0,0,0,1,0,1,1,1,1,0},
            {0,1,1,1,2,0,2,3,1,0},
            {0,1,3,0,2,4,1,1,1,0},
            {0,1,1,1,1,2,1,0,0,0},
            {0,0,0,0,1,3,1,0,0,0},
            {0,0,0,0,1,1,1,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
       } 
    },	
	{
		10,10,
		{
			{0,1,1,1,1,1,1,1,0,0}, //地图二
			{0,1,4,3,1,0,0,1,0,0},
			{0,1,0,0,2,0,0,1,0,0},
            {0,1,1,0,1,1,0,1,1,0},
            {0,0,1,0,1,1,0,0,1,0},
            {0,0,1,3,0,2,0,0,1,0},
            {0,0,1,0,0,1,0,0,1,0},
            {0,0,1,1,1,1,1,1,1,0}		
			
		}
		
	},
	{
		10,10,
		{
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0},
			{0,1,1,1,1,1,1,1,1,0},  //地图三
			{0,1,0,0,0,4,0,0,1,0}, 
			{0,1,0,0,2,2,2,0,1,0},
			{1,1,0,1,1,0,1,1,1,0},
			{1,0,0,0,3,3,3,1,0,0}, 
			{1,0,0,0,1,1,1,1,0,0},
			{1,1,1,1,1,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		} 
	},
	{
		10,10,
		{ 
			{0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0},
		    {0,0,0,1,1,1,1,1,0,0}, //地图四
			{0,1,1,1,3,0,0,1,0,0}, 
			{0,1,4,1,0,0,0,1,0,0},
			{0,1,0,2,5,2,0,1,0,0},
			{0,1,0,0,0,1,1,1,0,0}, 
			{0,1,0,0,3,1,0,0,0,0},
			{0,1,1,1,1,1,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
	    } 
	},
	{
		10,10,
		{
			{0,0,0,0,0,0,0,0,0,0},
		    {0,0,0,1,1,1,1,1,0,0},//地图五
			{0,1,1,1,0,0,0,1,0,0},
			{0,1,0,2,0,1,0,1,1,0},
            {0,1,0,1,0,0,3,0,1,0},
            {0,1,0,0,0,0,1,0,1,0},
            {0,1,1,2,1,3,0,0,1,0},
            {0,0,1,4,0,0,1,1,1,0},
            {0,0,1,1,1,1,1,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		}
	},
	{
		9,7,
		{
			{0,0,0,0,1,1,1,0,0,0},//地图六
			{0,1,1,1,1,4,1,0,0,0},
			{0,1,3,0,0,0,1,1,0,0},
			{0,1,3,0,5,0,0,1,0,0},
            {0,1,3,0,1,2,0,1,0,0},
            {0,1,1,2,1,0,0,1,0,0},
            {0,0,1,0,2,0,1,1,0,0},
            {0,0,1,0,0,0,1,0,0,0},
            {0,0,1,1,1,1,1,0,0,0},
			{0,0,0,0,0,0,0,0,0,0}
		}
	},
	{
		10,10,
		{
			{1,1,1,1,1,1,1,1,1,0},//地图七
			{1,0,0,0,4,0,0,0,1,0},
			{1,0,0,0,2,0,0,0,1,0},
			{1,0,5,0,1,0,5,0,1,0},
            {1,3,1,3,1,3,1,3,1,0},
            {1,0,3,2,1,2,3,0,1,0},
            {1,0,2,0,2,0,2,0,1,0},
            {1,0,0,0,0,0,0,0,1,0},
            {1,1,1,1,1,1,1,1,1,0},
			{0,0,0,0,0,0,0,0,0,0}
		}
	},
	{
		10,10,
		{
			{0,0,0,0,0,0,0,0,0,0},
			{0,1,1,1,1,1,1,1,1,0},//地图八 
			{0,1,0,0,0,1,0,0,1,0},
			{0,1,0,1,0,1,2,3,1,0},
			{0,1,0,0,0,0,2,3,1,0},
            {0,1,0,1,0,1,0,0,1,0},
            {0,1,0,0,0,1,0,0,1,0},
            {0,1,1,1,1,1,0,4,1,0},
            {0,0,0,0,0,1,1,1,1,0},
			{0,0,0,0,0,0,0,0,0,0}
		}
	},
	{
		10,10,
		{
		    {0,0,1,1,1,1,0,0,0,0},//地图九 
			{0,0,1,0,0,1,1,1,1,0},
			{0,1,1,4,0,2,0,0,1,0},
			{0,1,0,5,3,5,0,0,1,0},
            {1,1,0,5,0,5,0,1,1,0},
            {1,0,0,5,0,5,0,1,0,0},
            {1,0,0,5,5,5,0,1,0,0},
            {1,1,0,0,0,0,0,1,0,0},
            {0,1,1,1,1,0,0,1,0,0},
            {0,0,0,0,1,1,1,1,0,0}
        }
	}
};

//批量处理数据
IMAGE kb;
IMAGE wall;
IMAGE box;
IMAGE goal;
IMAGE girl;
IMAGE boxgoal;
IMAGE mangoal;
//-----------------------------------
//加载资源
void loadResource()
{
	loadimage(&kb,"0.jpg");
	loadimage(&wall,"1.jpg");
	loadimage(&box,"2.jpg");
    loadimage(&goal,"3.jpg");
	loadimage(&girl,"4.jpg");
	loadimage(&boxgoal,"5.jpg");
	loadimage(&mangoal,"6.jpg");
}
//制作地图
void drawMap(char (*map)[C], int *r,int *c )
{
	int x,y;
	for(int i=0;i<*r;i++)
	{
		for(int j=0;j<*c;j++)
		{
			x=64*j;
			y=64*i;

			switch(map[i][j])
			{
			case 0:
				putimage(x,y,&kb);
				break;
			case 1:
                putimage(x,y,&wall);
				break;
			case 2:
                putimage(x,y,&box);
				break;
			case 3:
				putimage(x,y,&goal);
				break;
			case 4:
				putimage(x,y,&girl);
				break;
			case 5:
				putimage(x,y,&boxgoal);
				break;
			case 6:
				putimage(x,y,&mangoal);
				break;
			default:
				break;
			}

		}
	}
}

void menu() //菜单函数
{
	printf("**************************\n");
	printf("*****-- 0.退出游戏 --*****\n");
	printf("*****-- 1.开始游戏 --*****\n");
	printf("**************************\n");
}


	
void man(char (*map)[C],const int *r, const int *c,int *x,int *y)//找到小人的位置 
{
	int i = 0;
	for (i = 0; i < *r; i++)
	{
		int j = 0;
		for (j = 0; j < *c; j++)
		{
			if ((map[i][j] == 4) || (map[i][j] == 6))
			{
				*x = i;
				*y = j;
				return;
			}
		}
	}
} 

void back(char map[][C],char map1[][C],const int *r,const int *c)//地图重置函数
{
	int i,j;
	char input=0;
			for(i=0;i<*r;i++)
				for(j=0;j<*c;j++)
				{
					map[i][j]=map1[i][j];
				}
	
}

void play(char (*map)[C],char (*map1)[C], int *r,int *c,int *x,int *y)//玩家控制小人移动 
{
	char input=0;
	switch(input=getch())
	{
	case 'W':
	case 'w':  
	case 72://向上走 
		{
			if (map[(*x) - 1][*y] == 0 && map[*x][*y] == 4)
			{
				map[*x][*y] = 0;
				map[(*x) - 1][*y] = 4;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 0 && map[*x][*y] == 6)
			{
				map[*x][*y] = 3;
				map[(*x) - 1][*y] = 4;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 3 && map[*x][*y] == 6)
			{
				map[*x][*y] = 3;
				map[(*x) - 1][*y] = 6;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 3 && map[*x][*y] == 4)
			{
				map[*x][*y] = 0;
				map[(*x) - 1][*y] = 6;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 2 && map[*x][*y] == 4 && map[(*x) - 2][*y] == 0)
			{
				map[*x][*y] = 0;
				map[(*x) - 1][*y] = 4;
				map[(*x) - 2][*y] = 2;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 2 && map[*x][*y] == 6 && map[(*x) - 2][*y] == 0)
			{
				map[*x][*y] = 3;
				map[(*x) - 1][*y] = 4;
				map[(*x) - 2][*y] = 2;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 2 && map[*x][*y] == 6 && map[(*x) - 2][*y] == 3)
			{
				map[*x][*y] = 3;
				map[(*x) - 1][*y] = 4;
				map[(*x) - 2][*y] = 5;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 2 && map[*x][*y] == 4 && map[(*x) - 2][*y] == 3)
			{
				map[*x][*y] = 0;
				map[(*x) - 1][*y] = 4;
				map[(*x) - 2][*y] = 5;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 5 && map[*x][*y] == 6 && map[(*x) - 2][*y] == 3)
			{
				map[*x][*y] = 3;
				map[(*x) - 1][*y] = 6;
				map[(*x) - 2][*y] = 5;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 5 && map[*x][*y] == 6 && map[(*x) - 2][*y] == 0)
			{
				map[*x][*y] = 3;
				map[(*x) - 1][*y] = 6;
				map[(*x) - 2][*y] = 2;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 5 && map[*x][*y] == 4 && map[(*x) - 2][*y] == 0)
			{
				map[*x][*y] = 0;
				map[(*x) - 1][*y] = 6;
				map[(*x) - 2][*y] = 2;
				--*x;
			}
			else if (map[(*x) - 1][*y] == 5 && map[*x][*y] == 4 && map[(*x) - 2][*y] == 3)
			{
				map[*x][*y] = 0;
				map[(*x) - 1][*y] = 6;
				map[(*x) - 2][*y] = 5;
				--*x;
			}
		}
		break;
	case 'S':
	case 's':   
	case 80://向下走
		{
			if (map[(*x) + 1][*y] == 0 && map[*x][*y] == 4)
			{
				map[*x][*y] = 0;
				map[(*x) + 1][*y] = 4;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 0 && map[*x][*y] == 6)
			{
				map[*x][*y] = 3;
				map[(*x) + 1][*y] = 4;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 3 && map[*x][*y] == 6)
			{
				map[*x][*y] = 3;
				map[(*x) + 1][*y] = 6;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 3 && map[*x][*y] == 4)
			{
				map[*x][*y] = 0;
				map[(*x) + 1][*y] = 6;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 2 && map[*x][*y] == 4 && map[(*x) + 2][*y] == 0)
			{
				map[*x][*y] = 0;
				map[(*x) + 1][*y] = 4;
				map[(*x) + 2][*y] = 2;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 2 && map[*x][*y] == 6 && map[(*x) + 2][*y] == 0)
			{
				map[*x][*y] = 3;
				map[(*x) + 1][*y] = 4;
				map[(*x) + 2][*y] = 2;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 2 && map[*x][*y] == 6 && map[(*x) + 2][*y] == 3)
			{
				map[*x][*y] = 3;
				map[(*x) + 1][*y] = 4;
				map[(*x) + 2][*y] = 5;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 2 && map[*x][*y] == 4 && map[(*x) + 2][*y] == 3)
			{
				map[*x][*y] = 0;
				map[(*x) + 1][*y] = 4;
				map[(*x) + 2][*y] = 5;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 5 && map[*x][*y] == 6 && map[(*x) + 2][*y] == 3)
			{
				map[*x][*y] = 3;
				map[(*x) + 1][*y] = 6;
				map[(*x) + 2][*y] = 5;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 5 && map[*x][*y] == 6 && map[(*x) + 2][*y] == 0)
			{
				map[*x][*y] = 3;
				map[(*x) + 1][*y] = 6;
				map[(*x) + 2][*y] = 2;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 5 && map[*x][*y] == 4 && map[(*x) + 2][*y] == 0)
			{
				map[*x][*y] = 0;
				map[(*x) + 1][*y] = 6;
				map[(*x) + 2][*y] = 2;
				++*x;
			}
			else if (map[(*x) + 1][*y] == 5 && map[*x][*y] == 4 && map[(*x) + 2][*y] == 3)
			{
				map[*x][*y] = 0;
				map[(*x) + 1][*y] = 6;
				map[(*x) + 2][*y] = 5;
				++*x;
			}
		}
		break;
	case 'A':
	case 'a':  
	case 75://向左走
		{
			if (map[*x][(*y) - 1] == 0 && map[*x][*y] == 4)
			{
				map[*x][*y] = 0;
				map[*x][(*y) - 1] = 4;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 0 && map[*x][*y] == 6)
			{
				map[*x][*y] = 3;
				map[*x][(*y) - 1] = 4;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 3 && map[*x][*y] == 6)
			{
				map[*x][*y] = 3;
				map[*x][(*y) - 1] = 6;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 3 && map[*x][*y] == 4)
			{
				map[*x][*y] = 0;
				map[*x][(*y) - 1] = 6;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 2 && map[*x][*y] == 4 && map[*x][(*y) - 2] == 0)
			{
				map[*x][*y] = 0;
				map[*x][(*y) - 1] = 4;
				map[*x][(*y) - 2] = 2;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 2 && map[*x][*y] == 6 && map[*x][(*y) - 2] == 0)
			{
				map[*x][*y] = 3;
				map[*x][(*y) - 1] = 4;
				map[*x][(*y) - 2] = 2;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 2 && map[*x][*y] == 6 && map[*x][(*y) - 2] == 3)
			{
				map[*x][*y] = 3;
				map[*x][(*y) - 1] = 4;
				map[*x][(*y) - 2] = 5;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 2 && map[*x][*y] == 4 && map[*x][(*y) - 2] == 3)
			{
				map[*x][*y] = 0;
				map[*x][(*y) - 1] = 4;
				map[*x][(*y) - 2] = 5;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 5 && map[*x][*y] == 6 && map[*x][(*y) - 2] == 3)
			{
				map[*x][*y] = 3;
				map[*x][(*y) - 1] = 6;
				map[*x][(*y) - 2] = 5;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 5 && map[*x][*y] == 6 && map[*x][(*y) - 2] == 0)
			{
				map[*x][*y] = 3;
				map[*x][(*y) - 1] = 6;
				map[*x][(*y) - 2] = 2;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 5 && map[*x][*y] == 4 && map[*x][(*y) - 2] == 0)
			{
				map[*x][*y] = 0;
				map[*x][(*y) - 1] = 6;
				map[*x][(*y) - 2] = 2;
				--*y;
			}
			else if (map[*x][(*y) - 1] == 5 && map[*x][*y] == 4 && map[*x][(*y) - 2] == 3)
			{
				map[*x][*y] = 0;
				map[*x][(*y) - 1] = 6;
				map[*x][(*y) - 2] = 5;
				--*y;
			}
		}
		break;
	case 'D':
	case 'd':  
	case 77://向右走
    {
		if (map[*x][(*y) + 1] == 0 && map[*x][*y] == 4)
		{
			map[*x][*y] = 0;
			map[*x][(*y) + 1] = 4;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 0 && map[*x][*y] == 6)
		{
			map[*x][*y] = 3;
			map[*x][(*y) + 1] = 4;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 3 && map[*x][*y] == 6)
		{
			map[*x][*y] = 3;
			map[*x][(*y) + 1] = 6;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 3 && map[*x][*y] == 4)
		{
			map[*x][*y] = 0;
			map[*x][(*y) + 1] = 6;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 2 && map[*x][*y] == 4 && map[*x][(*y) + 2] == 0)
		{
			map[*x][*y] = 0;
			map[*x][(*y) + 1] = 4;
			map[*x][(*y) + 2] = 2;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 2 && map[*x][*y] == 6 && map[*x][(*y) + 2] == 0)
		{
			map[*x][*y] = 3;
			map[*x][(*y) + 1] = 4;
			map[*x][(*y) + 2] = 2;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 2 && map[*x][*y] == 6 && map[*x][(*y) + 2] == 3)
		{
			map[*x][*y] = 3;
			map[*x][(*y) + 1] = 4;
			map[*x][(*y) + 2] = 5;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 2 && map[*x][*y] == 4 && map[*x][(*y) + 2] == 3)
		{
			map[*x][*y] = 0;
			map[*x][(*y) + 1] = 4;
			map[*x][(*y) + 2] = 5;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 5 && map[*x][*y] == 6 && map[*x][(*y) + 2] == 3)
		{
			map[*x][*y] = 3;
			map[*x][(*y) + 1] = 6;
			map[*x][(*y) + 2] = 5;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 5 && map[*x][*y] == 6 && map[*x][(*y) + 2] == 0)
		{
			map[*x][*y] = 3;
			map[*x][(*y) + 1] = 6;
			map[*x][(*y) + 2] = 2;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 5 && map[*x][*y] == 4 && map[*x][(*y) + 2] == 0)
		{
			map[*x][*y] = 0;
			map[*x][(*y) + 1] = 6;
			map[*x][(*y) + 2] = 2;
			++*y;
		}
		else if (map[*x][(*y) + 1] == 5 && map[*x][*y] == 4 && map[*x][(*y) + 2] == 3)
		{
			map[*x][*y] = 0;
			map[*x][(*y) + 1] = 6;
			map[*x][(*y) + 2] = 5;
			++*y;
		}
	}
		break;
	case 'R' :
	case 'r' :
		{
		   back(map,map1,r,c);
		      man(map,r,c,x,y);
		}
		break;
	}
}

int win(char (*map)[C],const int *r,const int *c)//判断是否胜利
{
	int dest = 0;
	int i = 0;
	for (i = 0; i < *r; i++)
	{
		int j = 0;
		for (j = 0; j < *c; j++)
		{
			if (map[i][j] == 2 || map[i][j] == 6)
				return 0;
		}
	}
	return 1;
} 


void game() //游戏执行函数
{
	int i=0;
	int x=0;
	int y=0;
	struct MAP *pmap=NULL;struct MAP *pmap1=NULL;
    printf("\n\n目前总共有%d关，你想要从哪一关开始玩？:>", NUM);
		printf("\n-----------------------------------\n");
	printf("\n\nW A S D或方向键控制人物，R键重置地图\n");
	scanf("%d", &i);
	if(i>9)
	{
		system("cls");
		printf("你输入的关卡不对，闫晓璐看不懂！！！\n");
        system("pause");
	}
	else
	{
	pmap = all_map + i - 1;
	pmap1= all_map1+ i - 1;
	man(pmap->map,&(pmap->r),&(pmap->c),&x,&y);
    initgraph(64*10,64*10);
	loadResource();
    while(1)
	{
		system("cls");
		play(pmap->map,pmap1->map,&(pmap->r),&(pmap->c),&x,&y);
		drawMap(pmap->map,&(pmap->r),&(pmap->c));
		if(win(pmap->map,&(pmap->r),&(pmap->c))&&i<=NUM)
		{
			system("cls");
			drawMap(pmap->map,&(pmap->r),&(pmap->c));
		    printf("你真棒，小哥哥or小姐姐!\n");
            system("pause");
			pmap++;
            pmap1++;
			x=0;
			y=0;
			i++;
			man(pmap->map,&(pmap->r),&(pmap->c),&x,&y);
		}
		else if(i==NUM+1)
		{
            printf("\n通关了啊！你真厉害\n");
			return;
		}
	}
	}
}

int main()
{
	int a=0;

	do
	{
		menu();
		printf("请选择想要进行的操作：》");
		scanf("%d",&a);

		switch(a)
		{
		case EXIT : printf("正在退出游戏");
			break;
		case PLAY : system("cls"), game(), system("cls");
			break;
		default : printf("你选择的选项有误，人家看不懂\n");
			break;
		}
	}while(a);
	return 0;
}